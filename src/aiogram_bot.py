from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os

BOT_TOKEN = os.getenv('BOT_TOKEN')

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(token=BOT_TOKEN)

MY_CHAT_ID = 597695657

class PositionSizeState(StatesGroup):
    waiting_for_size = State()
    
class MaxPositionsState(StatesGroup):
    waiting_for_max = State()

main_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"), 
         types.KeyboardButton(text="üî¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π")]
    ],
    resize_keyboard=True
)

START_MESSAGE = """FireflyX ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ. –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–æ—Ü—Å–µ—Ç–µ–π –∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
üî• –†–µ–∞–≥–∏—Ä—É–π –ø–µ—Ä–≤—ã–º. –¢–æ—Ä–≥—É–π —É–º–Ω–µ–µ.
‚öôÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏—Ä–∂–∞–º–∏, –≥–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤.
üåê –°–∫–æ—Ä–æ: –ò–ò-–∞–≥–µ–Ω—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
"""

async def send_welcome(message: types.Message):
    """This handler will be called when user sends `/start` command"""
    print(f"Chat ID: {message.chat.id}")
    await message.reply(START_MESSAGE, reply_markup=main_keyboard)

_notification_loop = None
_notification_queue = asyncio.Queue()
_notification_task = None

def _get_notification_loop():
    global _notification_loop, _notification_task
    if _notification_loop is None:
        _notification_loop = asyncio.new_event_loop()
        _notification_task = _notification_loop.create_task(_process_notifications())
        
        import threading
        def run_loop():
            asyncio.set_event_loop(_notification_loop)
            _notification_loop.run_forever()
        
        threading.Thread(target=run_loop, daemon=True).start()
    
    return _notification_loop

async def _process_notifications():
    while True:
        text = await _notification_queue.get()
        try:
            await bot.send_message(MY_CHAT_ID, text)
        except Exception as e:
            print(f"Error sending notification: {e}")
        finally:
            _notification_queue.task_done()

def send_notification(text):
    loop = _get_notification_loop()
    loop.call_soon_threadsafe(lambda: _notification_queue.put_nowait(text))

def format_position_close_notification(symbol, position_details):
    """Format notification for position closure with P&L information"""
    if position_details:
        pnl = position_details.get('unrel_pnl', 0)
        avg_price = position_details.get('avg_price', 0)
        qty = position_details.get('qty', 0)
        side = position_details.get('side', '')
        
        position_value = avg_price * qty
        
        emoji = "üü¢ –ü–†–ò–ë–´–õ–¨" if float(pnl) > 0 else "üî¥ –£–ë–´–¢–û–ö"
        message = f"üîÑ –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò | {symbol.upper()}\n\n" \
                f"üìä –î–µ—Ç–∞–ª–∏:\n" \
                f"‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {side}\n" \
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n" \
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price}\n" \
                f"‚Ä¢ –°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏: ${position_value:.2f}\n\n" \
                f"{emoji}: ${float(pnl):.2f}"
        
        return message
    else:
        return f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {symbol.upper()}"

def format_position_open_notification(symbol, position_details, state, approx_amount=None):
    """Format notification for position opening with different states"""
    if position_details:
        avg_price = position_details.get('avg_price', 0)
        qty = position_details.get('qty', 0)
        position_value = avg_price * qty
        
        if state == "STARTED":
            return f"üü° –ù–ê–ß–ê–õ–û –ü–ê–ú–ü–ê | {symbol.upper()}\n\n" \
                  f"üìä –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è:\n" \
                  f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n" \
                  f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {avg_price}\n" \
                  f"‚Ä¢ –°—É–º–º–∞: ${position_value:.2f}"
        elif state == "CONFIRMED":
            return f"üü¢ –ü–ê–ú–ü –ü–û–î–¢–í–ï–†–ñ–î–ï–ù | {symbol.upper()}\n\n" \
                  f"üìä –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è:\n" \
                  f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n" \
                  f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price}\n" \
                  f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${position_value:.2f}"
        elif state == "STABILIZED":
            return f"üîµ –ü–ê–ú–ü –°–¢–ê–ë–ò–õ–ò–ó–ò–†–û–í–ê–õ–°–Ø | {symbol.upper()}\n\n" \
                  f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:\n" \
                  f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n" \
                  f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price}\n" \
                  f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${position_value:.2f}"
    else:
        emoji = "üü°" if state == "STARTED" else "üü¢" if state == "CONFIRMED" else "üîµ"
        return f"{emoji} –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é ({state}): {symbol}, –°—É–º–º–∞: ~{approx_amount}$"

dp.message.register(send_welcome, Command(commands=['start']))

async def change_position_size(message: types.Message, state: FSMContext):
    await state.set_state(PositionSizeState.waiting_for_size)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ USD):")

async def process_position_size(message: types.Message, state: FSMContext):
    try:
        size_value = float(message.text)
        await state.clear()
        await message.reply(f"‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${size_value:.2f}", reply_markup=main_keyboard)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        
async def change_max_positions(message: types.Message, state: FSMContext):
    await state.set_state(MaxPositionsState.waiting_for_max)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:")

async def process_max_positions(message: types.Message, state: FSMContext):
    try:
        max_value = int(message.text)
        if max_value <= 0:
            await message.reply("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        await state.clear() 
        await message.reply(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {max_value}", reply_markup=main_keyboard)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

dp.message.register(send_welcome, Command(commands=['start']))
dp.message.register(change_position_size, lambda message: message.text == "üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
dp.message.register(process_position_size, PositionSizeState.waiting_for_size)
dp.message.register(change_max_positions, lambda message: message.text == "üî¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π")
dp.message.register(process_max_positions, MaxPositionsState.waiting_for_max)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.set_event_loop(asyncio.new_event_loop())
        asyncio.run(main())
    except KeyboardInterrupt:
        pass